#!/usr/bin/env python3
import os
import sys

PLUGINS_PRO = "./plugins/plugins.pro"

shaders = False

def format_template(template, name):
    template = template.replace("<-SHADERS-INCLUDE->", SHADERS_INCLUDE if shaders else "")
    template = template.replace("<-SHADERS-H->", SHADERS_H if shaders else "")
    template = template.replace("<-SHADERS-CPP->", SHADERS_CPP if shaders else "")
    template = template.replace("<-NAME-FILE->", name)
    template = template.replace("<-NAME-DEFINE->", name.upper())
    template = template.replace("<-NAME-CLASS->", name)
    return template


def format_file(name, extension, template):
    with open("./plugins/" + name + "/" + name + extension, "w+") as f:
        f.write(format_template(template, name))

def main():
    os.chdir(os.environ.get('VVIEWER'))

    plugin_name = sys.argv[1]
    if len(sys.argv) == 3 and sys.argv[2] == "-shaders":
        global shaders
        shaders = True

    path = os.getcwd()
    os.makedirs("./plugins/" + plugin_name)
    format_file(plugin_name, ".h", TEMPLATE_H)
    format_file(plugin_name, ".cpp", TEMPLATE_CPP)
    format_file(plugin_name, ".pro", TEMPLATE_PRO)
    with open(PLUGINS_PRO, "a") as f:
        f.write("SUBDIRS += " + plugin_name + "\n")
    if shaders:
        format_file(plugin_name, ".vert", "")
        format_file(plugin_name, ".frag", "")
    os.system("open " + "./plugins/" + plugin_name + "/*")


TEMPLATE_PRO = 'TARGET = $$qtLibraryTarget(<-NAME-FILE->)  # Nom del plugin\n'	\
               'include(../common.pro)'

TEMPLATE_H = '''#ifndef _<-NAME-DEFINE->_H
#define _<-NAME-DEFINE->_H
#include "basicplugin.h"
<-SHADERS-INCLUDE->
class <-NAME-CLASS-> : public QObject, public BasicPlugin {
    Q_OBJECT
#if QT_VERSION >= 0x050000
    Q_PLUGIN_METADATA(IID "BasicPlugin")
#endif
    Q_INTERFACES(BasicPlugin)
public:
    void onPluginLoad();
    void onObjectAdd();
    void preFrame();
    void postFrame();
    bool paintGL();
    bool drawScene();
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void wheelEvent(QWheelEvent *);
private:<-SHADERS-H->
};

#endif
'''

TEMPLATE_CPP = '''#include "<-NAME-FILE->.h"
#include "glwidget.h"

void <-NAME-CLASS->::onPluginLoad() {} 

void <-NAME-CLASS->::onObjectAdd() {} 

void <-NAME-CLASS->::preFrame() {} 

void <-NAME-CLASS->::postFrame() {} 

bool <-NAME-CLASS->::paintGL() {return false;} 

bool <-NAME-CLASS->::drawScene() {return false;} 

void <-NAME-CLASS->::keyPressEvent(QKeyEvent *) {} 

void <-NAME-CLASS->::keyReleaseEvent(QKeyEvent *) {} 

void <-NAME-CLASS->::mouseMoveEvent(QMouseEvent *) {} 

void <-NAME-CLASS->::mousePressEvent(QMouseEvent *) {} 

void <-NAME-CLASS->::mouseReleaseEvent(QMouseEvent *) {} 

void <-NAME-CLASS->::wheelEvent(QWheelEvent *) {}

<-SHADERS-CPP->
'''

SHADERS_INCLUDE = '''#include <QGLShader>
#include <QGLShaderProgram>
'''

SHADERS_H = '''
    QGLShaderProgram* program;
    QGLShader* vs;
    QGLShader* fs;

    void loadShaders();
'''

SHADERS_CPP = '''void <-NAME-CLASS->::loadShaders() {
    vs = new QGLShader(QGLShader::Vertex, this);
    vs->compileSourceFile("plugins/<-NAME-FILE->/<-NAME-FILE->.vert");

    fs = new QGLShader(QGLShader::Fragment, this);
    fs->compileSourceFile("plugins/<-NAME-FILE->/<-NAME-FILE->.frag");

    program = new QGLShaderProgram(this);
    program->addShader(vs);
    program->addShader(fs);
    program->link();
}
'''


if __name__ == "__main__":
    main()